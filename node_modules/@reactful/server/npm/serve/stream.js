"use server";
import { queriefy, response, JSXON } from "@reactful/commons";
import { mergeHTML } from "../build";
import { Path, File } from "../extra";
import { parser } from './parser';
export const isStream = (request) => Object.keys(queriefy(request)).includes("jsx");
export async function stream(params, type = "html") {
    if (params && params instanceof Request)
        if (params && params instanceof Request)
            return isStream(params)
                ? stream(new Path(params.url).href, "stream")
                : undefined;
    const value = params;
    const route = typeof params == 'string' ? params : '/';
    const named = `${Path.routes}${params}.tsx`;
    const index = `${Path.routes}${params}/index.tsx`;
    const found = await new File(value).exists() ? value
        : await new File(named).exists() ? named
            : await new File(index).exists() ? index
                : undefined;
    if (!found)
        return response(404, 'not found: ' + params);
    const mergingHTML = ([jsx, html]) => route ? mergeHTML(jsx, route, html) : '';
    const importDefault = x => x.then(x => x.default)
        .then(x => parser(x, value));
    const streamPipeline = x => importDefault(x)
        .then(jsx => jsx ? JSXON.htmlfy(jsx) : '');
    const servingPipeline = x => importDefault(x)
        .then(jsx => [jsx, JSXON.htmlfy(jsx)])
        .then(mergingHTML);
    const pipeline = type == "stream" ? streamPipeline
        : type == "html" ? servingPipeline
            : importDefault;
    const data = await pipeline(import(found));
    const mime = type == "html" ? "text/html" : "text/plain";
    return response(200, data, mime);
}
//# sourceMappingURL=stream.js.map